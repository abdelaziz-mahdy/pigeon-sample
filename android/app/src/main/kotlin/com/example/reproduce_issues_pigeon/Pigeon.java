// Autogenerated from Pigeon (v17.3.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package com.example.reproduce_issues_pigeon;

import static java.lang.annotation.ElementType.METHOD;
import static java.lang.annotation.RetentionPolicy.CLASS;

import android.util.Log;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MessageCodec;
import io.flutter.plugin.common.StandardMessageCodec;
import java.io.ByteArrayOutputStream;
import java.lang.annotation.Retention;
import java.lang.annotation.Target;
import java.nio.ByteBuffer;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/** Generated class from Pigeon. */
@SuppressWarnings({"unused", "unchecked", "CodeBlock2Expr", "RedundantSuppression", "serial"})
public class Pigeon {

  /** Error class for passing custom error details to Flutter via a thrown PlatformException. */
  public static class FlutterError extends RuntimeException {

    /** The error code. */
    public final String code;

    /** The error details. Must be a datatype supported by the api codec. */
    public final Object details;

    public FlutterError(@NonNull String code, @Nullable String message, @Nullable Object details) 
    {
      super(message);
      this.code = code;
      this.details = details;
    }
  }

  @NonNull
  protected static ArrayList<Object> wrapError(@NonNull Throwable exception) {
    ArrayList<Object> errorList = new ArrayList<Object>(3);
    if (exception instanceof FlutterError) {
      FlutterError error = (FlutterError) exception;
      errorList.add(error.code);
      errorList.add(error.getMessage());
      errorList.add(error.details);
    } else {
      errorList.add(exception.toString());
      errorList.add(exception.getClass().getSimpleName());
      errorList.add(
        "Cause: " + exception.getCause() + ", Stacktrace: " + Log.getStackTraceString(exception));
    }
    return errorList;
  }

  @Target(METHOD)
  @Retention(CLASS)
  @interface CanIgnoreReturnValue {}

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class Message {
    private @NonNull String subject;

    public @NonNull String getSubject() {
      return subject;
    }

    public void setSubject(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"subject\" is null.");
      }
      this.subject = setterArg;
    }

    private @NonNull String body;

    public @NonNull String getBody() {
      return body;
    }

    public void setBody(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"body\" is null.");
      }
      this.body = setterArg;
    }

    private @NonNull String email;

    public @NonNull String getEmail() {
      return email;
    }

    public void setEmail(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"email\" is null.");
      }
      this.email = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    Message() {}

    public static final class Builder {

      private @Nullable String subject;

      @CanIgnoreReturnValue
      public @NonNull Builder setSubject(@NonNull String setterArg) {
        this.subject = setterArg;
        return this;
      }

      private @Nullable String body;

      @CanIgnoreReturnValue
      public @NonNull Builder setBody(@NonNull String setterArg) {
        this.body = setterArg;
        return this;
      }

      private @Nullable String email;

      @CanIgnoreReturnValue
      public @NonNull Builder setEmail(@NonNull String setterArg) {
        this.email = setterArg;
        return this;
      }

      public @NonNull Message build() {
        Message pigeonReturn = new Message();
        pigeonReturn.setSubject(subject);
        pigeonReturn.setBody(body);
        pigeonReturn.setEmail(email);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(3);
      toListResult.add(subject);
      toListResult.add(body);
      toListResult.add(email);
      return toListResult;
    }

    static @NonNull Message fromList(@NonNull ArrayList<Object> list) {
      Message pigeonResult = new Message();
      Object subject = list.get(0);
      pigeonResult.setSubject((String) subject);
      Object body = list.get(1);
      pigeonResult.setBody((String) body);
      Object email = list.get(2);
      pigeonResult.setEmail((String) email);
      return pigeonResult;
    }
  }

  private static class MessageApiCodec extends StandardMessageCodec {
    public static final MessageApiCodec INSTANCE = new MessageApiCodec();

    private MessageApiCodec() {}

    @Override
    protected Object readValueOfType(byte type, @NonNull ByteBuffer buffer) {
      switch (type) {
        case (byte) 128:
          return Message.fromList((ArrayList<Object>) readValue(buffer));
        default:
          return super.readValueOfType(type, buffer);
      }
    }

    @Override
    protected void writeValue(@NonNull ByteArrayOutputStream stream, Object value) {
      if (value instanceof Message) {
        stream.write(128);
        writeValue(stream, ((Message) value).toList());
      } else {
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter. */
  public interface MessageApi {

    @NonNull 
    List<Message> getMessages(@NonNull String email);

    /** The codec used by MessageApi. */
    static @NonNull MessageCodec<Object> getCodec() {
      return MessageApiCodec.INSTANCE;
    }
    /**Sets up an instance of `MessageApi` to handle messages through the `binaryMessenger`. */
    static void setUp(@NonNull BinaryMessenger binaryMessenger, @Nullable MessageApi api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.reproduce_issues_pigeon.MessageApi.getMessages", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String emailArg = (String) args.get(0);
                try {
                  List<Message> output = api.getMessages(emailArg);
                  wrapped.add(0, output);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
}
