// Autogenerated from Pigeon (v4.0.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import Foundation
import Flutter

/// Generated class from Pigeon.

/// Generated class from Pigeon that represents data sent in messages.
struct Message {
  var subject: String
  var body: String
  var email: String

  static func fromMap(_ map: [String: Any?]) -> Message? {
    let subject = map["subject"] as! String
    let body = map["body"] as! String
    let email = map["email"] as! String

    return Message(
      subject: subject,
      body: body,
      email: email
    )
  }
  func toMap() -> [String: Any?] {
    return [
      "subject": subject,
      "body": body,
      "email": email
    ]
  }
}
private class MessageApiCodecReader: FlutterStandardReader {
  override func readValue(ofType type: UInt8) -> Any? {
    switch type {
      case 128:
        return Message.fromMap(self.readValue() as! [String: Any])      
      default:
        return super.readValue(ofType: type)
      
    }
  }
}
private class MessageApiCodecWriter: FlutterStandardWriter {
  override func writeValue(_ value: Any) {
    if let value = value as? Message {
      super.writeByte(128)
      super.writeValue(value.toMap())
    } else {
      super.writeValue(value)
    }
  }
}

private class MessageApiCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return MessageApiCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return MessageApiCodecWriter(data: data)
  }
}

class MessageApiCodec: FlutterStandardMessageCodec {
  static let shared = MessageApiCodec(readerWriter: MessageApiCodecReaderWriter())
}

/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol MessageApi {
  func getMessages(email: String) -> [Message]
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class MessageApiSetup {
  /// The codec used by MessageApi.
  static var codec: FlutterStandardMessageCodec { MessageApiCodec.shared }
  /// Sets up an instance of `MessageApi` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: MessageApi?) {
    let getMessagesChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.MessageApi.getMessages", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getMessagesChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let emailArg = args[0] as! String
        let result = api.getMessages(email: emailArg)
        reply(wrapResult(result))
      }
    } else {
      getMessagesChannel.setMessageHandler(nil)
    }
  }
}

private func wrapResult(_ result: Any?) -> [String: Any?] {
  return ["result": result]
}

private func wrapError(_ error: FlutterError) -> [String: Any?] {
  return [
    "error": [
      "code": error.code,
      "message": error.message,
      "details": error.details
    ]
  ]
}
